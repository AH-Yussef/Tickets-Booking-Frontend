{"remainingRequest":"/Users/alihassan/Desktop/Tickets-Booking-Frontend/tikcets-booking-frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/alihassan/Desktop/Tickets-Booking-Frontend/tikcets-booking-frontend/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/alihassan/Desktop/Tickets-Booking-Frontend/tikcets-booking-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/alihassan/Desktop/Tickets-Booking-Frontend/tikcets-booking-frontend/src/views/Home.vue?vue&type=template&id=fae5bece&scoped=true&","dependencies":[{"path":"/Users/alihassan/Desktop/Tickets-Booking-Frontend/tikcets-booking-frontend/src/views/Home.vue","mtime":1644413830118},{"path":"/Users/alihassan/Desktop/Tickets-Booking-Frontend/tikcets-booking-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/alihassan/Desktop/Tickets-Booking-Frontend/tikcets-booking-frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/alihassan/Desktop/Tickets-Booking-Frontend/tikcets-booking-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/alihassan/Desktop/Tickets-Booking-Frontend/tikcets-booking-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}